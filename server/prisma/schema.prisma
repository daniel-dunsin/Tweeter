generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auth {
  id            String    @id @default(uuid())
  email         String    @unique
  userName      String?
  password      String?
  isVerified    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deactivatedAt DateTime?

  @@index([email])
  @@map("auths")
}

model User {
  id               String        @id @default(uuid())
  email            String        @unique
  name             String
  userName         String?
  dateOfBirth      String?
  profilePicture   String        @default("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR1H81w4SmKH5DZmIbxU7EB0aMSkNQDoPQA1mRQxf2Y0wMF1NSa7vghbwwKASi1q4NPmNw&usqp=CAU")
  profilePictureId String?
  coverPicture     String?
  coverPictureId   String?
  website          String?
  bio              String?
  isVerified       Boolean       @default(false)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now()) @updatedAt
  jwtToken         JwtToken?
  interests        SubCategory[]
  followers        Follow[]      @relation("Followings")
  followings       Follow[]      @relation("Followers")

  retweets   Tweet[]         @relation("UserRetweet")
  tweets     Tweet[]         @relation("Tweets")
  likedPosts Tweet[]         @relation("Likes")
  bookmarks  Tweet[]         @relation("Bookmarks")
  mentions   TweetMentions[]

  @@index([email, userName])
  @@map("users")
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  follower    User     @relation("Followers", references: [id], fields: [followerId])
  followingId String
  following   User     @relation("Followings", references: [id], fields: [followingId])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  @@unique([followerId, followingId])
  @@map("follows")
}

enum TokenTypes {
  accountVerificationToken
  passwordResetToken
}

model Token {
  id        String     @id @unique @default(uuid())
  code      String
  type      TokenTypes
  email     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([email])
  @@map("tokens")
}

model JwtToken {
  id          String   @id @default(uuid())
  user        User?    @relation(references: [id], fields: [userId])
  userId      String   @unique
  accessToken String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("jwt_tokens")
}

model Category {
  id            String        @id @default(uuid())
  name          String
  description   String?
  subCategories SubCategory[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt

  @@map("categories")
}

model SubCategory {
  id          String    @id @default(uuid())
  name        String
  description String?
  categoryId  String
  category    Category? @relation(references: [id], fields: [categoryId])
  users       User[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  @@map("subcategories")
}

model Tweet {
  id           String          @id @default(uuid())
  isPinned     Boolean         @default(false)
  media        TweetMedia[]
  text         String?
  hashTagUsage HashTagUsage[]
  hashTags     HashTag[]
  mentions     TweetMentions[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @default(now()) @updatedAt

  parentTweetId String? @unique
  parentTweet   Tweet?  @relation("ParentChildTweets", fields: [parentTweetId], references: [id])
  childTweetId  String? @unique
  childTweets   Tweet?  @relation("ParentChildTweets")

  quotedTweetId String?
  quotedTweet   Tweet?  @relation("Quotes", fields: [quotedTweetId], references: [id])
  quotes        Tweet[] @relation("Quotes")

  retweeters User[] @relation("UserRetweet")

  tweeterId String
  tweeter   User   @relation("Tweets", references: [id], fields: [tweeterId])

  likersIds String[]
  likers    User[]   @relation("Likes")

  bookmarkers User[] @relation("Bookmarks")

  locationId String?
  location   TweetLocation? @relation(references: [id], fields: [locationId])

  @@map("tweets")
}

enum TweetMediaType {
  image
  video
  audio
  gif
}

model TweetMedia {
  id       String         @id @default(uuid())
  type     TweetMediaType
  url      String
  publicId String?
  tweetId  String
  tweet    Tweet          @relation(references: [id], fields: [tweetId])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("tweets_media")
}

model HashTag {
  id           String         @id @default(uuid())
  text         String
  slug         String
  tweets       Tweet[]
  hashTagUsage HashTagUsage[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt

  @@map("hashtags")
}

model TweetMentions {
  id      String @id @default(uuid())
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  tweetId String
  tweet   Tweet  @relation(fields: [tweetId], references: [id])
  count   Int    @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("tweet_mentions")
}

model HashTagUsage {
  id String @id @default(uuid())

  hashTagId String
  hashTag   HashTag @relation(references: [id], fields: [hashTagId])

  tweetId String
  tweet   Tweet  @relation(references: [id], fields: [tweetId])

  createdAt DateTime @default(now())

  @@map("hashtags_usage")
}

model TweetLocation {
  id     String  @id @default(uuid())
  tweets Tweet[]
  lng    Decimal
  lat    Decimal
  name   String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([lng, lat])
  @@map("tweet_location")
}
